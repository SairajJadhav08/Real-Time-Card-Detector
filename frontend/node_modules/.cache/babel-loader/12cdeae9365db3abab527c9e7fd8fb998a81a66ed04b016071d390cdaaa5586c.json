{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import axios from'axios';const API_BASE_URL='http://localhost:8000';export const useDetectionStats=()=>{const[stats,setStats]=useState(null);const[cardFrequency,setCardFrequency]=useState([]);const[timeline,setTimeline]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const[lastDays,setLastDays]=useState();const fetchStats=useCallback(async days=>{setError(null);try{const params=days?{days}:{};const response=await axios.get(\"\".concat(API_BASE_URL,\"/api/stats\"),{params,timeout:10000});setStats(response.data);setLastDays(days);}catch(err){console.error('Failed to fetch detection stats:',err);if(axios.isAxiosError(err)){var _err$response;if(err.code==='ECONNABORTED'){setError('Request timeout. Please check your connection.');}else if(((_err$response=err.response)===null||_err$response===void 0?void 0:_err$response.status)===404){setError('Stats endpoint not found. Please check the server.');}else if(err.response&&err.response.status>=500){setError('Server error. Please try again later.');}else{var _err$response2,_err$response2$data;setError(((_err$response2=err.response)===null||_err$response2===void 0?void 0:(_err$response2$data=_err$response2.data)===null||_err$response2$data===void 0?void 0:_err$response2$data.message)||'Failed to fetch statistics');}}else{setError('Network error. Please check your connection.');}}},[]);const fetchCardFrequency=useCallback(async days=>{setError(null);try{const params=days?{days}:{};const response=await axios.get(\"\".concat(API_BASE_URL,\"/api/card-frequency\"),{params,timeout:10000});setCardFrequency(response.data.cards||[]);}catch(err){console.error('Failed to fetch card frequency:',err);if(axios.isAxiosError(err)){if(err.code==='ECONNABORTED'){setError('Request timeout. Please check your connection.');}else{var _err$response3,_err$response3$data;setError(((_err$response3=err.response)===null||_err$response3===void 0?void 0:(_err$response3$data=_err$response3.data)===null||_err$response3$data===void 0?void 0:_err$response3$data.message)||'Failed to fetch card frequency');}}else{setError('Network error. Please check your connection.');}}},[]);const fetchTimeline=useCallback(async days=>{setError(null);try{const params=days?{days}:{};const response=await axios.get(\"\".concat(API_BASE_URL,\"/api/timeline\"),{params,timeout:10000});setTimeline(response.data.timeline||[]);}catch(err){console.error('Failed to fetch timeline:',err);if(axios.isAxiosError(err)){var _err$response4;if(err.code==='ECONNABORTED'){setError('Request timeout. Please check your connection.');}else if(((_err$response4=err.response)===null||_err$response4===void 0?void 0:_err$response4.status)===404){// Timeline endpoint might not exist, ignore error\nconsole.warn('Timeline endpoint not available');}else{var _err$response5,_err$response5$data;setError(((_err$response5=err.response)===null||_err$response5===void 0?void 0:(_err$response5$data=_err$response5.data)===null||_err$response5$data===void 0?void 0:_err$response5$data.message)||'Failed to fetch timeline');}}else{setError('Network error. Please check your connection.');}}},[]);const refreshAll=useCallback(async days=>{setLoading(true);setError(null);try{await Promise.all([fetchStats(days),fetchCardFrequency(days),fetchTimeline(days)]);}catch(err){console.error('Failed to refresh all stats:',err);}finally{setLoading(false);}},[fetchStats,fetchCardFrequency,fetchTimeline]);const getTopCards=useCallback(function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;return cardFrequency.sort((a,b)=>b.count-a.count).slice(0,limit);},[cardFrequency]);const getRecentActivity=useCallback(function(){let hours=arguments.length>0&&arguments[0]!==undefined?arguments[0]:24;const cutoffTime=new Date();cutoffTime.setHours(cutoffTime.getHours()-hours);return timeline.filter(item=>{const itemDate=new Date(item.date);itemDate.setHours(item.hour);return itemDate>=cutoffTime;}).sort((a,b)=>{const dateA=new Date(a.date);dateA.setHours(a.hour);const dateB=new Date(b.date);dateB.setHours(b.hour);return dateB.getTime()-dateA.getTime();});},[timeline]);const calculateTrends=useCallback(()=>{if(!stats||!stats.daily_stats||stats.daily_stats.length<2){return{dailyTrend:0,weeklyTrend:0,confidenceTrend:0};}const dailyStats=stats.daily_stats.sort((a,b)=>new Date(a.date).getTime()-new Date(b.date).getTime());// Calculate daily trend (last 2 days)\nconst lastTwo=dailyStats.slice(-2);const dailyTrend=lastTwo.length===2?(lastTwo[1].count-lastTwo[0].count)/Math.max(lastTwo[0].count,1)*100:0;// Calculate weekly trend (last 7 days vs previous 7 days)\nlet weeklyTrend=0;if(dailyStats.length>=14){const lastWeek=dailyStats.slice(-7).reduce((sum,day)=>sum+day.count,0);const prevWeek=dailyStats.slice(-14,-7).reduce((sum,day)=>sum+day.count,0);weeklyTrend=(lastWeek-prevWeek)/Math.max(prevWeek,1)*100;}// Confidence trend (simplified - based on current avg vs target)\nconst targetConfidence=0.8;const confidenceTrend=(stats.avg_confidence-targetConfidence)/targetConfidence*100;return{dailyTrend:Math.round(dailyTrend*10)/10,weeklyTrend:Math.round(weeklyTrend*10)/10,confidenceTrend:Math.round(confidenceTrend*10)/10};},[stats]);// Auto-fetch initial stats\nuseEffect(()=>{refreshAll(30);// Default to last 30 days\n},[]);// Auto-refresh every 60 seconds\nuseEffect(()=>{const interval=setInterval(()=>{refreshAll(lastDays);},60000);return()=>clearInterval(interval);},[refreshAll,lastDays]);return{stats,cardFrequency,timeline,loading,error,fetchStats,fetchCardFrequency,fetchTimeline,refreshAll,getTopCards,getRecentActivity,calculateTrends};};export default useDetectionStats;","map":{"version":3,"names":["useState","useEffect","useCallback","axios","API_BASE_URL","useDetectionStats","stats","setStats","cardFrequency","setCardFrequency","timeline","setTimeline","loading","setLoading","error","setError","lastDays","setLastDays","fetchStats","days","params","response","get","concat","timeout","data","err","console","isAxiosError","_err$response","code","status","_err$response2","_err$response2$data","message","fetchCardFrequency","cards","_err$response3","_err$response3$data","fetchTimeline","_err$response4","warn","_err$response5","_err$response5$data","refreshAll","Promise","all","getTopCards","limit","arguments","length","undefined","sort","a","b","count","slice","getRecentActivity","hours","cutoffTime","Date","setHours","getHours","filter","item","itemDate","date","hour","dateA","dateB","getTime","calculateTrends","daily_stats","dailyTrend","weeklyTrend","confidenceTrend","dailyStats","lastTwo","Math","max","lastWeek","reduce","sum","day","prevWeek","targetConfidence","avg_confidence","round","interval","setInterval","clearInterval"],"sources":["C:/Users/Asus/OneDrive/Desktop/card/frontend/src/hooks/useDetectionStats.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\n\ninterface DetectionStats {\n  total_detections: number;\n  unique_cards: number;\n  avg_confidence: number;\n  detection_rate: number;\n  most_detected_card: string;\n  least_detected_card: string;\n  daily_stats: Array<{\n    date: string;\n    count: number;\n  }>;\n}\n\ninterface CardFrequency {\n  card_name: string;\n  count: number;\n  percentage: number;\n  avg_confidence: number;\n}\n\ninterface CardFrequencyResponse {\n  cards: CardFrequency[];\n  total_unique_cards: number;\n  most_frequent: string;\n  least_frequent: string;\n}\n\ninterface TimelineData {\n  date: string;\n  hour: number;\n  count: number;\n  avg_confidence: number;\n}\n\ninterface UseDetectionStatsReturn {\n  stats: DetectionStats | null;\n  cardFrequency: CardFrequency[];\n  timeline: TimelineData[];\n  loading: boolean;\n  error: string | null;\n  fetchStats: (days?: number) => Promise<void>;\n  fetchCardFrequency: (days?: number) => Promise<void>;\n  fetchTimeline: (days?: number) => Promise<void>;\n  refreshAll: (days?: number) => Promise<void>;\n  getTopCards: (limit?: number) => CardFrequency[];\n  getRecentActivity: (hours?: number) => TimelineData[];\n  calculateTrends: () => {\n    dailyTrend: number;\n    weeklyTrend: number;\n    confidenceTrend: number;\n  };\n}\n\nconst API_BASE_URL = 'http://localhost:8000';\n\nexport const useDetectionStats = (): UseDetectionStatsReturn => {\n  const [stats, setStats] = useState<DetectionStats | null>(null);\n  const [cardFrequency, setCardFrequency] = useState<CardFrequency[]>([]);\n  const [timeline, setTimeline] = useState<TimelineData[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [lastDays, setLastDays] = useState<number | undefined>();\n\n  const fetchStats = useCallback(async (days?: number) => {\n    setError(null);\n    \n    try {\n      const params = days ? { days } : {};\n      const response = await axios.get<DetectionStats>(`${API_BASE_URL}/api/stats`, {\n        params,\n        timeout: 10000\n      });\n      \n      setStats(response.data);\n      setLastDays(days);\n    } catch (err) {\n      console.error('Failed to fetch detection stats:', err);\n      if (axios.isAxiosError(err)) {\n        if (err.code === 'ECONNABORTED') {\n          setError('Request timeout. Please check your connection.');\n        } else if (err.response?.status === 404) {\n          setError('Stats endpoint not found. Please check the server.');\n        } else if (err.response && err.response.status >= 500) {\n          setError('Server error. Please try again later.');\n        } else {\n          setError(err.response?.data?.message || 'Failed to fetch statistics');\n        }\n      } else {\n        setError('Network error. Please check your connection.');\n      }\n    }\n  }, []);\n\n  const fetchCardFrequency = useCallback(async (days?: number) => {\n    setError(null);\n    \n    try {\n      const params = days ? { days } : {};\n      const response = await axios.get<CardFrequencyResponse>(`${API_BASE_URL}/api/card-frequency`, {\n        params,\n        timeout: 10000\n      });\n      \n      setCardFrequency(response.data.cards || []);\n    } catch (err) {\n      console.error('Failed to fetch card frequency:', err);\n      if (axios.isAxiosError(err)) {\n        if (err.code === 'ECONNABORTED') {\n          setError('Request timeout. Please check your connection.');\n        } else {\n          setError(err.response?.data?.message || 'Failed to fetch card frequency');\n        }\n      } else {\n        setError('Network error. Please check your connection.');\n      }\n    }\n  }, []);\n\n  const fetchTimeline = useCallback(async (days?: number) => {\n    setError(null);\n    \n    try {\n      const params = days ? { days } : {};\n      const response = await axios.get<{ timeline: TimelineData[] }>(`${API_BASE_URL}/api/timeline`, {\n        params,\n        timeout: 10000\n      });\n      \n      setTimeline(response.data.timeline || []);\n    } catch (err) {\n      console.error('Failed to fetch timeline:', err);\n      if (axios.isAxiosError(err)) {\n        if (err.code === 'ECONNABORTED') {\n          setError('Request timeout. Please check your connection.');\n        } else if (err.response?.status === 404) {\n          // Timeline endpoint might not exist, ignore error\n          console.warn('Timeline endpoint not available');\n        } else {\n          setError(err.response?.data?.message || 'Failed to fetch timeline');\n        }\n      } else {\n        setError('Network error. Please check your connection.');\n      }\n    }\n  }, []);\n\n  const refreshAll = useCallback(async (days?: number) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      await Promise.all([\n        fetchStats(days),\n        fetchCardFrequency(days),\n        fetchTimeline(days)\n      ]);\n    } catch (err) {\n      console.error('Failed to refresh all stats:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [fetchStats, fetchCardFrequency, fetchTimeline]);\n\n  const getTopCards = useCallback((limit: number = 10): CardFrequency[] => {\n    return cardFrequency\n      .sort((a, b) => b.count - a.count)\n      .slice(0, limit);\n  }, [cardFrequency]);\n\n  const getRecentActivity = useCallback((hours: number = 24): TimelineData[] => {\n    const cutoffTime = new Date();\n    cutoffTime.setHours(cutoffTime.getHours() - hours);\n    \n    return timeline.filter(item => {\n      const itemDate = new Date(item.date);\n      itemDate.setHours(item.hour);\n      return itemDate >= cutoffTime;\n    }).sort((a, b) => {\n      const dateA = new Date(a.date);\n      dateA.setHours(a.hour);\n      const dateB = new Date(b.date);\n      dateB.setHours(b.hour);\n      return dateB.getTime() - dateA.getTime();\n    });\n  }, [timeline]);\n\n  const calculateTrends = useCallback(() => {\n    if (!stats || !stats.daily_stats || stats.daily_stats.length < 2) {\n      return {\n        dailyTrend: 0,\n        weeklyTrend: 0,\n        confidenceTrend: 0\n      };\n    }\n\n    const dailyStats = stats.daily_stats.sort((a, b) => \n      new Date(a.date).getTime() - new Date(b.date).getTime()\n    );\n\n    // Calculate daily trend (last 2 days)\n    const lastTwo = dailyStats.slice(-2);\n    const dailyTrend = lastTwo.length === 2 \n      ? ((lastTwo[1].count - lastTwo[0].count) / Math.max(lastTwo[0].count, 1)) * 100\n      : 0;\n\n    // Calculate weekly trend (last 7 days vs previous 7 days)\n    let weeklyTrend = 0;\n    if (dailyStats.length >= 14) {\n      const lastWeek = dailyStats.slice(-7).reduce((sum, day) => sum + day.count, 0);\n      const prevWeek = dailyStats.slice(-14, -7).reduce((sum, day) => sum + day.count, 0);\n      weeklyTrend = ((lastWeek - prevWeek) / Math.max(prevWeek, 1)) * 100;\n    }\n\n    // Confidence trend (simplified - based on current avg vs target)\n    const targetConfidence = 0.8;\n    const confidenceTrend = ((stats.avg_confidence - targetConfidence) / targetConfidence) * 100;\n\n    return {\n      dailyTrend: Math.round(dailyTrend * 10) / 10,\n      weeklyTrend: Math.round(weeklyTrend * 10) / 10,\n      confidenceTrend: Math.round(confidenceTrend * 10) / 10\n    };\n  }, [stats]);\n\n  // Auto-fetch initial stats\n  useEffect(() => {\n    refreshAll(30); // Default to last 30 days\n  }, []);\n\n  // Auto-refresh every 60 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refreshAll(lastDays);\n    }, 60000);\n    \n    return () => clearInterval(interval);\n  }, [refreshAll, lastDays]);\n\n  return {\n    stats,\n    cardFrequency,\n    timeline,\n    loading,\n    error,\n    fetchStats,\n    fetchCardFrequency,\n    fetchTimeline,\n    refreshAll,\n    getTopCards,\n    getRecentActivity,\n    calculateTrends\n  };\n};\n\nexport default useDetectionStats;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}